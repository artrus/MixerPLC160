

(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM PLC_PRG
VAR
	I : INT;
	Pump : fbPump;
	Podpitka : fbPodpitka;
	Doz : ARRAY [0..1] OF fbDoz;
	Poliv : fbPoliv;
	state : INT  := 1; (*0 - Ожидание действий или расписания, 1 - Приготовление начального раствора, 2 - Подпитка, 3 - Полив*)

	allow_poliv : BOOL; (*Полив разрешен*)

	pump_on: BOOL;
	block: BOOL;

(*Удалить ниже*)
	doz_on : BOOL;
	reset: BOOL;
	initial_rastvor : BOOL;


	start_poliv : BOOL;
	stop_poliv : BOOL;
	count_poliv_sp : WORD;
	pt_poliv_sp : WORD;
	valve_q : BOOL;

END_VAR
(* @END_DECLARATION := '0' *)
IF NOT fINIT THEN INIT; fINIT:=TRUE; END_IF;	(*Инициализация на первом цикле*)
PLC_Clock(set_time:= TRUE, set_date:= TRUE, HH:=chas, MM:=minut, SS:=sekund, D:=den, M:=mes, Y:=god);	 (*Синхронизируем время с панелью*)

Read_Inputs;

CASE state OF

0: raspisanie;

1: Poliv(	start :=start_poliv,
			stop :=stop_poliv,
			pt_podgotov1 := 2,
			pt_podgotov2 :=t_podg,
			pt_sliv :=time_sliv,
			count_sp :=count_poliv_sp,
			pt_poliv :=pt_poliv_sp,
			skip:=skip_poliv,
			valve =>valve_q,
 			pump =>,
			act_doz =>,
			status_poliv=>ind_status_poliv,
			fPoliv=>ind_POLIV,
			skiped=>
		);

END_CASE



Podpitka(	auto_manual:=global_auto_manual,
			manual := m_nabor,
			start:= cmd_start_podpitka_bak,
			H_sp:= H_podpitka_on,
			M_sp:= M_podpitka_on,
			reset:= cmd_reset_podpitka_bak,
			ptTimeNaliv:= DWORD_TO_TIME(time_2_del_uroven*60*1000) ,
			temp:=AI_ARRAY[2].outVal,
			temp_sp_avar:=low_avar_temp,
			temp_sp_warn:=low_warn_temp,
			status=>ind_status_podpitki,
			valve=>ind_Water,
			allow=>allow_poliv, allow=>ind_allow_poliv,
			avar_no_water=>ind_no_Water,
			ftemp_warn=> warn_temper,
			ftemp_avar=> ind_avr_temp
			);

Pump(		on := Poliv.pump,
			block := block,
			reset := reset_avar_nas,
			ptStartPump := timeout_start_pump,
			analysis_avar := analysis_avar_pump,
			status => ind_NAS,
			avar_bk => ind_avar_bk_ns,
			avar_press => ind_avar_press_ns ,
			avar_log =>,
			warn_low_press => warn_press
			);

DozVars[0].cur_conc := AI_ARRAY[0].outVal;
DozVars[1].cur_conc := AI_ARRAY[1].outVal;
FOR I:=0 TO 1 DO
		Doz[I]( in:=ADR(DozVars[I]),
				enable :=Poliv.act_doz,
				reset :=reset,
				auto_manual:=global_auto_manual,
				initial := initial_rastvor,
				blocked =>arr_valve_blocked[I],
				valve =>arr_valve[I],
				ready =>arr_ready_rastvor[I]
		);
END_FOR
Control_ValveABC();
ind_avar_global := ind_no_Water OR warn_temper OR ind_avr_temp OR arr_valve_blocked[0] OR arr_valve_blocked[1] OR ind_avar_bk_ns OR ind_avar_press_ns OR warn_press;


Modbus();
Write_Outputs;






END_PROGRAM
